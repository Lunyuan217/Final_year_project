# -*- coding: utf-8 -*-
"""Main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14qs8IklLQbVDJ9VOm4miDyhFmZ-MdTbE
"""

import scipy.io as io
import os
import torch
import numpy as np
from torch.utils.data import DataLoader, Dataset
import torchvision.transforms
import torch.nn as nn
from torch.autograd import Variable
import matplotlib.pyplot as plt
from torch_radon import Radon, RadonFanbeam
from kornia import rotate
from random import choice
from network_arch import UNet
from data import dataloader_train,dataloader_test
from utils import PSNR_cal,show_images
from train import EI_train,Supervised_train
from test import EI_test,Supervised_test

epochs=5000
batch_size=2
learning_rate=0.0005
weight_dec=1e-8
alpha=0.1
image_size=128
n_views=50
det_count = int(np.sqrt(2)*image_size + 0.5)   
angles = np.linspace(0, np.pi, n_views, endpoint=False)
radon = Radon(image_size, angles, clip_to_circle=False, det_count=det_count)
loss_fn = nn.MSELoss().cuda()
Supervised_model = UNet().cuda()
EI_model = UNet().cuda()
optimizer_Sup = torch.optim.Adam(Supervised_model.parameters(), lr=learning_rate, weight_decay=weight_dec)
optimizer_EI = torch.optim.Adam(EI_model.parameters(), lr=learning_rate, weight_decay=weight_dec)
scheduler_Sup = torch.optim.lr_scheduler.MultiStepLR(optimizer_Sup, milestones=[2000,3000,4000], gamma=0.2)
scheduler_EI = torch.optim.lr_scheduler.MultiStepLR(optimizer_EI, milestones=[2000,3000,4000], gamma=0.2)
Sup_psnrs_train,Sup_psnrs_test= [],[]
EI_psnrs_train,EI_psnrs_test= [],[]
gt_path = ('/content/drive/MyDrive/Final_year_project/src/Dataset/Groud_Truth_train.mat')
gt_path_test = ('/content/drive/MyDrive/Final_year_project/src/Dataset/Groud_Truth_test.mat')

dataloader_train,dataset_train=dataloader_train(gt_path,batch_size)
dataloader_test,dataset_test=dataloader_test(gt_path_test,batch_size)

EI_Model_path = '/content/drive/MyDrive/Final_year_project/Trained_model/EI_model/50-views'
Supervised_Model_path = '/content/drive/MyDrive/Final_year_project/Trained_model/Supervised_model/50-views'

Supervised_train(dataloader_train,Supervised_model,Supervised_Model_path,loss_fn,optimizer_Sup,epochs,scheduler_Sup,radon)
EI_train(dataloader_train,EI_model,EI_Model_path,loss_fn,optimizer_EI,radon,alpha,epochs,scheduler_EI)

Sup_psnrs_train,Sup_psnrs_test = Supervised_test(dataloader_test, Supervised_Model_path, loss_fn,epochs,radon)
EI_psnrs_train,EI_psnrs_test = EI_test(dataloader_test, EI_Model_path, loss_fn,radon,epochs)

plt.figure(figsize=(10,4))
plt.plot(Sup_psnrs_train,label="Sup_psnrs_train")
plt.plot(Sup_psnrs_test,label="Sup_psnrs_test")
plt.plot(EI_psnrs_train,label="EI_psnrs_train")
plt.plot(EI_psnrs_test,label="EI_psnrs_test")
plt.xlabel('Epoch')
# Set the y axis label of the current axis.
plt.ylabel('PSNR(dB)')
# Set a title of the current axes.
#plt.title('Two or more lines on same plot with suitable legends ')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.savefig('/content/drive/MyDrive/Final_year_project/Figures/50_views.png')
plt.show()