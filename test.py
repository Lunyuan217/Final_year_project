# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RrDMlR9vJiv6tlJjP-tBRWuFgZfHAyRG
"""

import torch
import numpy as np
import matplotlib.pyplot as plt
from utils import PSNR_cal,show_images
from network_arch import UNet
import os

def Supervised_test_loop(dataloader, model, loss_fn,radon):
    model.eval()
    test_loss, test_psnr=[], []
    with torch.no_grad():
        for X in dataloader:
            X = X.cuda()
            y = radon.forward(X)    
            filtered_sinogram = radon.filter_sinogram(y)
            fbpy = radon.backprojection(filtered_sinogram)
            pred = model(fbpy.float())
            test_loss.append(loss_fn(pred, X).item()) 
            test_psnr.append(PSNR_cal(X, pred,torch.max(pred)))  
    print(f"Test : \n  Avg loss: {np.mean(test_loss):>8f} \n")
    print(f"  Avg psnr: {np.mean(test_psnr):>8f} \n")
    return np.mean(test_psnr)

def EI_test_loop(dataloader, model, loss_fn,radon):
    #test_loss, correct = 0, 0
    model.eval()
    test_loss, test_psnr=[], []
    #i=0
    with torch.no_grad():
        for X in dataloader:
            X = X.cuda()
            y = radon.forward(X)    
            filtered_sinogram = radon.filter_sinogram(y)
            x1 = model(radon.backprojection(filtered_sinogram))
            test_loss.append(loss_fn(x1, X).item()) 
            test_psnr.append(PSNR_cal(X, x1,torch.max(x1))) 

  
    print(f"Test : \n  Avg loss: {np.mean(test_loss):>8f} \n")
    print(f"  Avg psnr: {np.mean(test_psnr):>8f} \n")
    return np.mean(test_psnr)

def EI_test(dataloader, path, loss_fn,radon,epochs):
    psnrs_train = []
    psnrs_test = []
    psnrs_epoch = []
    loss_train = []
    checkpoint_model_dir=path
    for e in range(epochs):
        if checkpoint_model_dir is not None and (e + 1) % 100 == 0 :
                print(f"Epoch {e+1}\n-------------------------------")
                path=os.path.join(checkpoint_model_dir, 'ckp_epoch_{}.pt'.format(e+1))
                ckpt = torch.load(path)
                test_model=UNet().cuda()
                test_model.load_state_dict(ckpt['net_state_dict'])
                psnrs_train.append(ckpt['epoch_psnr_train'])
                loss_train.append(ckpt['epoch_psnr_loss'])
                psnrs_epoch.append(ckpt['epoch'])
                psnrs_test.append(EI_test_loop(dataloader, test_model, loss_fn,radon))
    print("Done!")
    return psnrs_train,psnrs_test

def Supervised_test(dataloader, path, loss_fn,epochs,radon):
    psnrs_train = []
    psnrs_test = []
    psnrs_epoch = []
    loss_train = []
    checkpoint_model_dir=path
    for e in range(epochs):
        if checkpoint_model_dir is not None and (e + 1) % 100 == 0 :
                print(f"Epoch {e+1}\n-------------------------------")
                path=os.path.join(checkpoint_model_dir, 'ckp_epoch_{}.pt'.format(e+1))
                ckpt = torch.load(path)
                test_model=UNet().cuda()
                test_model.load_state_dict(ckpt['net_state_dict'])
                psnrs_train.append(ckpt['epoch_psnr_train'])
                loss_train.append(ckpt['epoch_psnr_loss'])
                psnrs_epoch.append(ckpt['epoch'])
                psnrs_test.append(Supervised_test_loop(dataloader, test_model, loss_fn,radon))
    print("Done!")
    return psnrs_train,psnrs_test